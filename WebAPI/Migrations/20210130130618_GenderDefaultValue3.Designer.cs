// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data;

namespace WebAPI.Migrations
{
    [DbContext(typeof(PersonContext))]
    [Migration("20210130130618_GenderDefaultValue3")]
    partial class GenderDefaultValue3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("AddressPerson", b =>
                {
                    b.Property<int>("AddressesAddressID")
                        .HasColumnType("int");

                    b.Property<int>("PersonsPersonID")
                        .HasColumnType("int");

                    b.HasKey("AddressesAddressID", "PersonsPersonID");

                    b.HasIndex("PersonsPersonID");

                    b.ToTable("AddressPerson");
                });

            modelBuilder.Entity("WebAPI.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("City")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Street")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zip")
                        .HasColumnType("varchar(5)");

                    b.HasKey("AddressID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("WebAPI.Models.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("PersonFK")
                        .HasColumnType("int");

                    b.Property<int?>("PostFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentID");

                    b.HasIndex("PersonFK");

                    b.HasIndex("PostFK");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("WebAPI.Models.ContactInfo", b =>
                {
                    b.Property<int>("ContactInfoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(320)");

                    b.Property<int>("PersonFK")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(15)");

                    b.HasKey("ContactInfoID");

                    b.HasIndex("PersonFK")
                        .IsUnique();

                    b.ToTable("ContactInfos");
                });

            modelBuilder.Entity("WebAPI.Models.Genders", b =>
                {
                    b.Property<int>("GendersID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValue("F");

                    b.Property<int>("PersonFK")
                        .HasColumnType("int");

                    b.HasKey("GendersID");

                    b.HasIndex("PersonFK")
                        .IsUnique();

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("WebAPI.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(35)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(35)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("PersonID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("WebAPI.Models.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.HasKey("PostID");

                    b.HasIndex("PersonFK");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("AddressPerson", b =>
                {
                    b.HasOne("WebAPI.Models.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesAddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonsPersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Models.Comment", b =>
                {
                    b.HasOne("WebAPI.Models.Person", "Person")
                        .WithMany("Comments")
                        .HasForeignKey("PersonFK");

                    b.HasOne("WebAPI.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostFK");

                    b.Navigation("Person");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("WebAPI.Models.ContactInfo", b =>
                {
                    b.HasOne("WebAPI.Models.Person", "Person")
                        .WithOne("ContactInfo")
                        .HasForeignKey("WebAPI.Models.ContactInfo", "PersonFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("WebAPI.Models.Genders", b =>
                {
                    b.HasOne("WebAPI.Models.Person", "Person")
                        .WithOne("Gender")
                        .HasForeignKey("WebAPI.Models.Genders", "PersonFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("WebAPI.Models.Post", b =>
                {
                    b.HasOne("WebAPI.Models.Person", "Person")
                        .WithMany("Posts")
                        .HasForeignKey("PersonFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("WebAPI.Models.Person", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ContactInfo");

                    b.Navigation("Gender");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("WebAPI.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
